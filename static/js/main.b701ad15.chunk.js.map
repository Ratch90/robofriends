{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","index","key","SearchBox","searchField","searchChange","classname","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","this","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isPeding","logger","createLogger","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b701ad15.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nconst Card = (props) => {\r\n    const {name,email,id} = props;\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots'src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n   \r\n    const cardArray = robots.map((user,index) => {\r\n        return (\r\n            <Card\r\n                key={index}\r\n                id={robots[index].id}\r\n                name={robots[index].name}\r\n                email={robots[index].email}\r\n            />\r\n        );\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField,searchChange}) => {\r\n\r\n    return (\r\n        <div classname='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='Search Robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border:'4px solid black', height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css'\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots : state.requestRobots.robots,\r\n        isPending : state.requestRobots.isPending,\r\n        error : state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange : (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots : () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();         \r\n    }\r\n\r\n   \r\n    render() {\r\n\r\n        const {searchField,onSearchChange,robots,isPending} = this.props;\r\n\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        return isPending ?\r\n            <h1>Loading..</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type : CHANGE_SEARCH_FIELD,\r\n    payload : text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('http://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type : REQUEST_ROBOTS_SUCCESS,payload : data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n\r\n\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField : ''\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPeding : false,\r\n    robots : [],\r\n    error : ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch,action = {}) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state,searchField:action.payload};\r\n        default : \r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots,action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state,isPending : true}\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state,robots: action.payload, isPending: false}\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state,error : action.payload,isPending: false}\r\n        default:\r\n            return state;\r\n        \r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider, connect} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleWare from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nimport {searchRobots,requestRobots} from './reducers'\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({searchRobots,requestRobots})\nconst store =\n createStore(rootReducers,applyMiddleware(thunkMiddleWare,logger));\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}